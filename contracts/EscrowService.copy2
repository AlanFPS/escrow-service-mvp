// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

contract EscrowService {
    struct Escrow {
        address buyer;
        address seller;
        address arbitrator;
        uint256 amount;
        EscrowStatus status;
    }

    enum EscrowStatus { Pending, Completed, Refunded }

    uint256 public escrowCount = 0;
    mapping(uint256 => Escrow) public escrows;

    // Function to create a new escrow
    function createEscrow(address _seller, address _arbitrator) public payable {
        require(msg.value > 0, "Payment required");

        escrowCount++;
        escrows[escrowCount] = Escrow({
            buyer: msg.sender,
            seller: _seller,
            arbitrator: _arbitrator,
            amount: msg.value,
            status: EscrowStatus.Pending
        });
    }

    // Function to release funds to the seller
    function releaseFunds(uint256 _escrowId) public {
        Escrow storage escrow = escrows[_escrowId];
        require(msg.sender == escrow.buyer, "Only buyer can release funds");
        require(escrow.status == EscrowStatus.Pending, "Escrow not pending");

        escrow.status = EscrowStatus.Completed;
        payable(escrow.seller).transfer(escrow.amount);
    }

    // Function to refund the buyer
    function refund(uint256 _escrowId) public {
        Escrow storage escrow = escrows[_escrowId];
        require(msg.sender == escrow.buyer || msg.sender == escrow.arbitrator, "Not authorized");
        require(escrow.status == EscrowStatus.Pending, "Escrow not pending");

        escrow.status = EscrowStatus.Refunded;
        payable(escrow.buyer).transfer(escrow.amount);
    }

    // Function to resolve a dispute
    function resolveDispute(uint256 _escrowId, bool _releaseToSeller) public {
        Escrow storage escrow = escrows[_escrowId];
        require(msg.sender == escrow.arbitrator, "Only arbitrator can resolve disputes");
        require(escrow.status == EscrowStatus.Pending, "Escrow not pending");

        if (_releaseToSeller) {
            escrow.status = EscrowStatus.Completed;
            payable(escrow.seller).transfer(escrow.amount);
        } else {
            escrow.status = EscrowStatus.Refunded;
            payable(escrow.buyer).transfer(escrow.amount);
        }
    }
}
